一个app

底部导航栏相关接口
1.主页
2.关注
3.消息
4.我的（个人中心）


主页：发现：http://localhost:5173/home
1.搜索接口
GET /api/search
参数：
- keyword: 搜索关键词
- page: 页码
- size: 每页数量

2.发现页面内容列表接口
GET /api/discover/list
参数：
- page: 页码
- size: 每页数量
返回：
- id: 内容ID
- title: 标题(如"XX手办分享") 
- description: 描述(如"XX手办开箱...")
- image: 图片URL
- createTime: 发布时间

3.内容详情接口
GET /api/content/{id}
参数：
- id: 内容ID
点击进入内容详情页



主页：广场：http://localhost:5173/plaza
长图文：
1.搜索接口
GET /api/search
参数：
- keyword: 搜索关键词
- page: 页码
- size: 每页数量

2.热门话题列表
GET /api/topics/hot
参数：
- page: 页码
- size: 每页数量
返回：
- id: 话题ID
- title: 话题标题
- rank: 排名
- heat: 热度值

3.热门活动列表
GET /api/activities/hot
参数：
- page: 页码
- size: 每页数量
返回：
- id: 活动ID
- title: 活动标题（如"二次元动漫展"）
- startTime: 开始时间
- endTime: 结束时间
- location: 活动地点
- status: 活动状态（未开始/进行中/已结束）

4."全部"查看更多
GET /api/topics/all  // 话题全部列表
GET /api/activities/all  // 活动全部列表
点击跳转对应详情页

短图文：
1.内容列表接口
GET /api/content/list
参数：
- type: 内容类型（展会回顾/开箱分享等）
- page: 页码
- size: 每页数量
返回：
- id: 内容ID
- title: 标题（如"二次元动漫展精彩回顾"）
- cover: 封面图URL
- author: {
    id: 作者ID,
    nickname: 昵称（如"动漫迷小A"）,
    avatar: 头像URL
  }
- description: 描述文本
- createTime: 发布时间

2.内容详情接口
点击进入内容详情页



消息页面：http://localhost:5173/message
1.消息分类列表接口：
GET /api/message/list
参数：
- type: 消息类型（回复我的/收到的赞/@我/收藏）
- page: 页码
- size: 每页数量
返回：
- id: 消息ID
- type: 消息类型
- content: 消息内容
- fromUser: 发送者信息
- createTime: 发送时间
- isRead: 是否已读

2.消息状态操作接口
POST /api/message/read  // 标记已读
POST /api/message/read-all  // 全部已读
DELETE /api/message/{id}  // 删除消息

3.未读消息计数接口
GET /api/message/unread-count
返回：
- total: 总未读数
- reply: 回复未读数
- like: 点赞未读数
- mention: @我未读数
- favorite: 收藏未读数
- system: 系统通知未读数

4.统一的消息列表接口
GET /api/message/list
参数：
- type: 消息类型（reply:回复/like:点赞/mention:@我/favorite:收藏/system:系统通知/activity:活动通知）
- page: 页码
- size: 每页数量
返回：
- id: 消息ID
- type: 消息类型
- title: 消息标题
- content: 消息内容
- fromUser: {  // 发送者信息，系统消息可为null
    id: 用户ID,
    nickname: 用户昵称,
    avatar: 头像URL
}
- targetId: 相关内容ID（如帖子ID、活动ID等）
- createTime: 发送时间
- isRead: 是否已读


关注页面：http://localhost:5173/follow
1.关注列表接口
GET /api/follow/list
参数：
- type: 关注分类（all:全部/cosplayer:Cos玩家/figure:手办控 等）
- page: 页码
- size: 每页数量
返回：
- users: [{
    id: 用户ID,
    nickname: 用户昵称,
    avatar: 头像URL,
    description: 简介,
    isFollowed: 是否已关注
  }]
- total: 总数

2.关注操作接口
POST /api/follow/action
参数：
- targetId: 目标用户ID
- action: 操作类型（follow:关注/unfollow:取消关注）

3.已关注用户的内容列表接口
GET /api/follow/content/list
参数：
- type: 内容类型（all:全部/figure:手办/cos:Cos照片）
- sortBy: 排序方式（time:最新/hot:最热）
- page: 页码
- size: 每页数量
返回：
- id: 内容ID
- title: 标题
- cover: 封面图
- description: 描述
- author: {
    id: 用户ID,
    nickname: 用户昵称,
    avatar: 头像URL
}
- createTime: 发布时间
- stats: {
    likeCount: 点赞数,
    commentCount: 评论数,
    shareCount: 分享数
}
- isFollowed: 是否已点赞



我的页面：
1.用户基础信息接口
GET /api/profile/profile
返回：
- id: 用户ID
- nickname: 用户昵称
- avatar: 头像URL
- stats: {
    favoriteCount: 收藏数(111),
    followerCount: 粉丝数(222),
    followingCount: 关注数(333)
}

2.动态预览接口
GET /api/profile/activities/preview
参数：
- userId: 用户ID
- limit: 显示数量（如1条）
返回：
- id: 动态ID
- content: 动态内容（可限制长度）
- cover: 预览图
- createTime: 发布时间（如"11-21"）
- stats: {
    likeCount: 点赞数(1111),
    favoriteCount: 收藏数(666),
    commentCount: 评论数(1w+)
}

3.文章预览接口
GET /api/profile/articles/preview
参数：
- userId: 用户ID
- limit: 显示数量（如1条）
返回：
- id: 文章ID
- title: 标题预览




收藏界面：
1.收藏列表接口
GET /api/collection/preview
参数：
- limit: 预览数量（如1条）
返回：
{
    id: 内容ID,  // 用于点击跳转
    title: "标题标题标题标题标题标题",
    author: {
        id: 用户ID,
        nickname: "XXX",
        avatar: 头像URL
    },
    summary: "正文正文正文正文正文正文",
    createTime: "11-21",
    stats: {
        likeCount: 1111,
        commentCount: "1w+"
    }
}


粉丝界面：
1.粉丝列表接口
GET /api/fans/followers
参数：
- page: 页码
- size: 每页数量
返回：
{
    list: [{
        id: 用户ID,
        nickname: 用户名,
        avatar: 头像URL,
        tags: ["标签标签", "标签标签标签"],  // 用户标签
        description: "用户简介用户简介...",
        isFollowing: false,  // 是否已关注
        isFollowedBy: true,  // 是否被对方关注（用于显示"互相关注"）
    }],
    hasMore: 是否有更多
}

2.关注操作接口
POST /api/fans/action
参数：
- targetId: 目标用户ID
- action: 操作类型（follow:关注/unfollow:取消关注）
返回：
{
    success: true/false,
    newStatus: 新的关注状态
}


动态发布界面：
1.动态发布接口
POST /api/content/publish
参数：
{
    content: "动态文本内容",
    images: ["图片1URL", "图片2URL"...],  // 可选
    topics: ["话题1ID", "话题2ID"],  // 可选，选择的话题
    type: "dynamic"  // 内容类型：动态
}
返回：
{
    success: true/false,
    contentId: "已发布的内容ID",
    message: "发布成功/失败原因"
}

2. 图片上传接口
POST /api/upload/image
参数：
- file: 图片文件
返回：
{
    url: "图片访问URL",
    width: 图片宽度,
    height: 图片高度
}

3. 话题列表接口
GET /api/topics/list
参数：
- keyword: 搜索关键词（可选）
- page: 页码
- size: 每页数量
返回：
{
    list: [{
        id: 话题ID,
        name: "话题名称",
        heat: 热度值
    }],
    hasMore: 是否有更多
}


文章发布界面：
1.文章发布接口
POST /api/article/publish
参数：
{
    title: "文章标题",
    content: "文章正文内容",
    topics: ["话题1ID", "话题2ID"],  // 可选，选择的话题
    type: "article",  // 内容类型：文章
    images: ["图片1URL", "图片2URL"...],  // 文章中的图片，可选
    draft: false  // 是否保存为草稿
}
返回：
{
    success: true/false,
    articleId: "已发布的文章ID",
    message: "发布成功/失败原因"
}

2.图片上传接口
1. 图片上传接口：
POST /api/upload/image
参数：
- file: 图片文件
- type: "article"  // 用途：文章
返回：
{
    success: true/false,
    url: "图片访问URL",
    width: 图片宽度,
    height: 图片高度,
    size: 文件大小,
    name: "原文件名"
}

3.话题列表接口
GET /api/topics/list
参数：
- keyword: 搜索关键词（可选）
- page: 页码
- size: 每页数量
返回：
{
    list: [{
        id: 话题ID,
        name: "话题名称",
        heat: 热度值
    }],
    hasMore: 是否有更多
}


我的文章页面：http://localhost:5173/articles
1.文章列表接口
GET /api/article/my/preview
参数：
- page: 页码
- size: 每页数量
返回：
{
    list: [{
        id: 文章ID,  // 用于点击跳转详情页
        title: "文章标题",
        summary: "正文摘要...",  // 预览内容
        createTime: "11-21",
        readCount: "阅读数"
    }],
    hasMore: 是否有更多,
    total: 总文章数
}

文章详情页面：http://localhost:5173/article/detail/{id}
1.文章详情接口
GET /api/article/detail/{id}
参数：
- id: 文章ID
返回：
{
    id: 文章ID,
    title: "文章标题",
    content: "文章正文内容",
    author: {
        id: 作者ID,
        nickname: 作者昵称,
        avatar: 头像URL
    },
    createTime: 发布时间,
    stats: {
        viewCount: 浏览数,
        likeCount: 点赞数,
        commentCount: 评论数,
        favoriteCount: 收藏数
    },
    isLiked: 是否已点赞,
    isFavorited: 是否已收藏
}

2.评论相关接口
// 发表评论
POST /api/comment/add
参数：
{
    articleId: 文章ID,
    content: "评论内容",
    replyTo: 回复的评论ID（可选）
}

// 获取评论列表
GET /api/comment/list
参数：
- articleId: 文章ID
- page: 页码
- size: 每页数量

3.互动操作接口
POST /api/article/action
参数：
- articleId: 文章ID
- type: 操作类型（like:点赞/favorite:收藏）
- action: 操作（add/cancel）



全部活动界面：http://localhost:5173/activity
1.活动列表接口
GET /api/activities/list
参数：
- page: 页码
- size: 每页数量
- status: 活动状态（all/upcoming/ongoing/ended）
返回：
{
    list: [{
        id: 活动ID,  // 用于点击跳转详情页
        title: "活动标题",  // 如"北京CCW华彩国际动漫游戏展"
        cover: "活动封面图URL",
        time: {
            start: "2024-01-01",
            end: "2024-01-03"
        },
        isFavorited: false,  // 是否已收藏，用于右上角星标
        status: "upcoming"  // 活动状态：即将开始/进行中/已结束
    }],
    hasMore: true,  // 是否还有更多
    total: 总活动数
}


活动详情页面：http://localhost:5173/activity/detail/{id}
1.活动详情接口
GET /api/activity/detail/{id}
参数：
- id: 活动ID
返回：
{
    id: 活动ID,
    title: "北京CCW华彩国际动漫游戏展",
    banner: "活动banner图URL",
    time: {
        start: "2024-01-01",
        end: "2024-01-03"
    },
    description: "活动详细描述",
    status: "upcoming",  // 活动状态
    isFavorited: false  // 是否已收藏
}

2.相关文章列表接口
GET /api/activity/related-articles
参数：
- activityId: 活动ID
- page: 页码
- size: 每页数量
返回：
{
    list: [{
        id: 文章ID,
        title: "CCW展会精彩回顾",
        cover: "封面图URL",
        summary: "本次CCW展会汇集了众多精彩展品...",
        author: {
            id: 作者ID,
            nickname: "动漫达人"
        },
        readCount: 1234,  // 阅读数
        createTime: 发布时间
    }],
    hasMore: 是否有更多
}


登录注册界面：
# 1.1 登录接口
POST /api/auth/login
请求参数：
{
    "username": "用户名",
    "password": "加密后的密码",
    "deviceId": "设备ID"  // 用于多设备登录控制
}
返回：
{
    "code": 200,
    "message": "success",
    "data": {
        "token": "JWT令牌",
        "refreshToken": "刷新令牌",
        "expiresIn": 7200,
        "userInfo": {
            "id": "用户ID",
            "nickname": "昵称",
            "avatar": "头像URL",
            "role": "用户角色"
        }
    }
}

# 1.2 注册接口
POST /api/auth/register
请求参数：
{
    "username": "用户名",
    "password": "加密后的密码",
    "nickname": "昵称",
    "email": "邮箱",
    "verifyCode": "验证码"
}
返回：同登录接口

# 1.3 刷新令牌
POST /api/auth/refresh
请求头：
- Authorization: Bearer <refresh_token>
返回：同登录接口

# 1.4 退出登录
POST /api/auth/logout
请求头：
- Authorization: Bearer <token>
返回：
{
    "code": 200,
    "message": "退出成功"
}